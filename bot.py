import os
import io
import speech_recognition as sr
from pydub import AudioSegment
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
# –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = "–í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"  # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
        "–Ø —É–º–µ—é:\n"
        "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!"
    )
    await update.message.reply_text(welcome_text)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    voice = update.message.voice
    file = await voice.get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await file.download_to_drive("voice.ogg")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
        audio = AudioSegment.from_ogg("voice.ogg")
        audio.export("voice.wav", format="wav")
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        recognizer = sr.Recognizer()
        with sr.AudioFile("voice.wav") as source:
            audio_data = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio_data, language="ru-RU")
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                await update.message.reply_text(
                    f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}", 
                    reply_to_message_id=update.message.message_id
                )
            except sr.UnknownValueError:
                await update.message.reply_text(
                    "–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ.", 
                    reply_to_message_id=update.message.message_id
                )
            except Exception as e:
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}", 
                    reply_to_message_id=update.message.message_id
                )
    
    except Exception as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", 
            reply_to_message_id=update.message.message_id
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if os.path.exists("voice.ogg"):
        os.remove("voice.ogg")
    if os.path.exists("voice.wav"):
        os.remove("voice.wav")

async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä—É–∂–æ—á–∫–æ–≤)"""
    video_note = update.message.video_note
    file = await video_note.get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
    await file.download_to_drive("video_note.mp4")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        audio = AudioSegment.from_file("video_note.mp4")
        audio.export("audio_from_video.wav", format="wav")
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        recognizer = sr.Recognizer()
        with sr.AudioFile("audio_from_video.wav") as source:
            audio_data = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio_data, language="ru-RU")
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                await update.message.reply_text(
                    f"üé• –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{text}", 
                    reply_to_message_id=update.message.message_id
                )
            except sr.UnknownValueError:
                await update.message.reply_text(
                    "–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ.", 
                    reply_to_message_id=update.message.message_id
                )
            except Exception as e:
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}", 
                    reply_to_message_id=update.message.message_id
                )
    
    except Exception as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e)}", 
            reply_to_message_id=update.message.message_id
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if os.path.exists("video_note.mp4"):
        os.remove("video_note.mp4")
    if os.path.exists("audio_from_video.wav"):
        os.remove("audio_from_video.wav")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤"""
    video = update.message.video
    file = await video.get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
    video_filename = f"video_{video.file_id}.mp4"
    await file.download_to_drive(video_filename)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        audio = AudioSegment.from_file(video_filename)
        audio_filename = f"audio_from_{video.file_id}.wav"
        audio.export(audio_filename, format="wav")
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        recognizer = sr.Recognizer()
        with sr.AudioFile(audio_filename) as source:
            audio_data = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio_data, language="ru-RU")
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                await update.message.reply_text(
                    f"üé¨ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞:\n\n{text}", 
                    reply_to_message_id=update.message.message_id
                )
            except sr.UnknownValueError:
                await update.message.reply_text(
                    "–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ.", 
                    reply_to_message_id=update.message.message_id
                )
            except Exception as e:
                await update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}", 
                    reply_to_message_id=update.message.message_id
                )
    
    except Exception as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: {str(e)}", 
            reply_to_message_id=update.message.message_id
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if os.path.exists(video_filename):
        os.remove(video_filename)
    if os.path.exists(audio_filename):
        os.remove(audio_filename)

async def handle_other_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–æ—á–∫–∏)\n"
        "‚Ä¢ –û–±—ã—á–Ω—ã–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤!",
        reply_to_message_id=update.message.message_id
    )

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.add_handler(MessageHandler(filters.ALL, handle_other_messages))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()